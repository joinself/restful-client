package main

import (
	"context"
	"database/sql"
	"flag"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strconv"
	"testing"
	"time"

	dbx "github.com/go-ozzo/ozzo-dbx"
	"github.com/joinself/restful-client/internal/account"
	"github.com/joinself/restful-client/internal/apikey"
	"github.com/joinself/restful-client/internal/app"
	"github.com/joinself/restful-client/internal/attestation"
	"github.com/joinself/restful-client/internal/auth"
	"github.com/joinself/restful-client/internal/clean"
	"github.com/joinself/restful-client/internal/config"
	"github.com/joinself/restful-client/internal/connection"
	"github.com/joinself/restful-client/internal/entity"
	"github.com/joinself/restful-client/internal/fact"
	"github.com/joinself/restful-client/internal/healthcheck"
	"github.com/joinself/restful-client/internal/message"
	"github.com/joinself/restful-client/internal/metric"
	"github.com/joinself/restful-client/internal/notification"
	"github.com/joinself/restful-client/internal/request"
	"github.com/joinself/restful-client/internal/self"
	"github.com/joinself/restful-client/internal/signature"
	"github.com/joinself/restful-client/internal/voice"
	"github.com/joinself/restful-client/pkg/acl"
	"github.com/joinself/restful-client/pkg/dbcontext"
	"github.com/joinself/restful-client/pkg/filter"
	"github.com/joinself/restful-client/pkg/log"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"

	_ "github.com/joinself/restful-client/docs" // docs is generated by Swag CLI, you have to import it.
	_ "github.com/lib/pq"
)

// Version indicates the current version of the application.
var Version = "1.0.0"

func main() {
	flag.Parse()
	// create root logger tagged with server version
	logger := log.New().With(context.Background(), "version", Version)

	// load application configurations
	cfg, err := config.Load(logger, ".env")
	if err != nil {
		logger.Errorf("failed to load application configuration: %s", err)
		os.Exit(-1)
	}

	// connect to the database
	err = os.MkdirAll(cfg.StorageDir, 0744)
	if err != nil {
		logger.Error(err)
		os.Exit(-1)
	}

	dbName := "client.db"
	if testing.Testing() {
		dbName = "client-test.db"
	}

	db, err := dbx.MustOpen("sqlite3", filepath.Join(cfg.StorageDir, dbName))
	if err != nil {
		logger.Error(err)
		os.Exit(-1)
	}
	db.QueryLogFunc = logDBQuery(logger)
	db.ExecLogFunc = logDBExec(logger)
	defer func() {
		if err := db.Close(); err != nil {
			logger.Error(err)
		}
	}()

	// build HTTP server
	buildHandler(logger, dbcontext.New(db), cfg)
}

// buildHandler sets up the HTTP routing and builds an HTTP handler.
//	@title			Joinself restful-client API
//	@version		1.0
//	@description	This is the api for Joinself restful client.
//	@termsOfService	http://swagger.io/terms/

//	@contact.name	API Support
//	@contact.url	http://www.swagger.io/support
//	@contact.email	support@swagger.io

//	@license.name	Apache 2.0
//	@license.url	http://www.apache.org/licenses/LICENSE-2.0.html

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization

// @host		localhost:8080
// @BasePath	/v1/
// @schemes		http https
func buildHandler(logger log.Logger, db *dbcontext.DB, cfg *config.Config) http.Handler {
	e := echo.New()
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	// TODO: move this to an environment variable.
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"*"},
		AllowMethods: []string{http.MethodGet, http.MethodHead, http.MethodPut, http.MethodPatch, http.MethodPost, http.MethodDelete},
	}))
	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		Format: "method=${method}, uri=${uri}, status=${status}\n",
	}))

	tokenChecker := filter.NewChecker()

	// Repositories
	connectionRepo := connection.NewRepository(db, logger)
	messageRepo := message.NewRepository(db, logger)
	factRepo := fact.NewRepository(db, logger)
	requestRepo := request.NewRepository(db, logger)
	attestationRepo := attestation.NewRepository(db, logger)
	accountRepo := account.NewRepository(db, logger)
	appRepo := app.NewRepository(db, logger)
	apikeyRepo := apikey.NewRepository(db, tokenChecker, logger)
	metricRepo := metric.NewRepository(db, tokenChecker, logger)
	voiceRepo := voice.NewRepository(db, logger)
	signatureRepo := signature.NewRepository(db, logger)

	// Services
	rService := request.NewService(requestRepo, factRepo, attestationRepo, logger)
	runner := self.NewRunner(self.RunnerConfig{
		ConnectionRepo: connectionRepo,
		FactRepo:       factRepo,
		MessageRepo:    messageRepo,
		RequestRepo:    requestRepo,
		RequestService: rService,
		AppRepo:        appRepo,
		MetricRepo:     metricRepo,
		VoiceRepo:      voiceRepo,
		SignatureRepo:  signatureRepo,
		Logger:         logger,
		StorageKey:     cfg.StorageKey,
		StorageDir:     cfg.StorageDir,
	})
	rService.SetRunner(runner)
	cService := connection.NewService(connectionRepo, runner, logger)
	aService := app.NewService(appRepo, runner, logger)
	vService := voice.NewService(voiceRepo, runner, logger)
	sService := signature.NewService(signatureRepo, runner, logger)

	// TODO: preload all deleted pi keys
	apikeyRepo.PreloadDeleted(context.Background())
	aclMiddleware := acl.NewMiddleware(tokenChecker)
	jwtAuthMiddleware := auth.JWTAuthMiddleware(cfg.JWTSigningKey)
	rg := e.Group("/v1")

	// App children handlers
	appsGroup := rg.Group("/apps")
	appsGroup.Use(jwtAuthMiddleware)
	appsGroup.Use(aclMiddleware.TokenAndAccessCheckMiddleware)
	app.RegisterHandlers(appsGroup,
		aService,
		logger,
	)
	connection.RegisterHandlers(appsGroup,
		cService,
		logger,
	)
	message.RegisterHandlers(appsGroup,
		message.NewService(messageRepo, runner, logger),
		cService,
		logger,
	)
	fact.RegisterHandlers(appsGroup,
		fact.NewService(factRepo, attestationRepo, runner, logger),
		cService,
		logger,
	)
	request.RegisterHandlers(appsGroup,
		rService,
		cService,
		logger,
	)
	notification.RegisterHandlers(appsGroup,
		notification.NewService(runner, logger),
		logger,
	)
	apikey.RegisterHandlers(appsGroup,
		apikey.NewService(cfg, apikeyRepo, logger),
		logger,
	)
	metric.RegisterHandlers(appsGroup,
		metric.NewService(cfg, metricRepo, logger),
		logger,
	)
	voice.RegisterHandlers(appsGroup,
		vService,
		cService,
		logger,
	)
	signature.RegisterHandlers(appsGroup,
		sService,
		cService,
		logger,
	)

	// accounts children handlers
	accountsGroup := rg.Group("/accounts")
	accountsGroup.Use(jwtAuthMiddleware)
	// accountsGroup.Use(aclMiddleware.Process)
	account.RegisterHandlers(accountsGroup,
		account.NewService(accountRepo, logger),
		logger,
	)

	// high level handlers
	healthcheck.RegisterHandlers(rg, Version)
	auth.RegisterHandlers(rg,
		auth.NewService(cfg, accountRepo, appRepo, logger),
		logger,
	)

	if cfg.DefaultSelfApp != nil {
		go runner.Run(entity.App{
			ID:           cfg.DefaultSelfApp.SelfAppID,
			DeviceSecret: cfg.DefaultSelfApp.SelfAppDeviceSecret,
			Env:          cfg.DefaultSelfApp.SelfEnv,
			Callback:     cfg.DefaultSelfApp.CallbackURL,
		})
	}
	status, err := aService.ListByStatus(context.Background(), []string{
		entity.APP_CREATED_STATUS,
		entity.APP_ENABLED_STATUS,
	})
	if err != nil {
		logger.With(context.Background()).Error("Problem retrieving apps to be started")
	}

	cleaner := clean.NewRunner(clean.RunnerConfig{
		Service: clean.NewService(clean.Config{
			DB:     db,
			Period: cfg.CleanupPeriod,
			Tables: []string{"fact", "message", "request", "attestation", "call"},
			Logger: logger,
		}),
	})
	go cleaner.Run()

	for _, app := range status {
		go runner.Run(app)
	}

	if cfg.ServeDocs == "true" {
		e.GET("/docs/*", echoSwagger.WrapHandler)
	}

	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)
	defer stop()
	go func() {
		fmt.Println(e.Start(":" + strconv.Itoa(cfg.ServerPort)))
	}()

	<-ctx.Done()
	ctx, cancel := context.WithTimeout(context.Background(), 20*time.Second)
	defer cancel()

	runner.StopAll()

	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}

	return e
}

// logDBQuery returns a logging function that can be used to log SQL queries.
func logDBQuery(logger log.Logger) dbx.QueryLogFunc {
	return func(ctx context.Context, t time.Duration, sql string, rows *sql.Rows, err error) {
		if err == nil {
			logger.With(ctx, "duration", t.Milliseconds(), "sql", sql).Info("DB query successful")
		} else {
			logger.With(ctx, "sql", sql).Errorf("DB query error: %v", err)
		}
	}
}

// logDBExec returns a logging function that can be used to log SQL executions.
func logDBExec(logger log.Logger) dbx.ExecLogFunc {
	return func(ctx context.Context, t time.Duration, sql string, result sql.Result, err error) {
		if err == nil {
			logger.With(ctx, "duration", t.Milliseconds(), "sql", sql).Info("DB execution successful")
		} else {
			logger.With(ctx, "sql", sql).Errorf("DB execution error: %v", err)
		}
	}
}
