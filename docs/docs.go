// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint retrieves and lists all the accounts that have been configured in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Lists all configured accounts.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The page number to retrieve. Defaults to 1 if not provided.",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of accounts to retrieve per page. Defaults to 10 if not provided.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upon successful operation, a paginated list of accounts is returned.",
                        "schema": {
                            "$ref": "#/definitions/account.ExtListResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - The requested resource does not exist, or you don't have permissions to access it",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint creates a new account in the system and sends a request to gather public information associated with the account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Creates a new account.",
                "parameters": [
                    {
                        "description": "The request body must contain the account details in JSON format.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/account.CreateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upon successful account creation, the response will contain the username, resources associated with the account,",
                        "schema": {
                            "$ref": "#/definitions/account.CreateAccountResponse"
                        }
                    },
                    "400": {
                        "description": "If the request body is invalid, a bad request error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "If the user is not authenticated as an admin, a forbidden error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "If there is any internal server error, a generic error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/accounts/{username}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes an existing account from the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Deletes an existing account.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The username of the account to be deleted.",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Upon successful account deletion, a no content response is returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "If the account does not exist or the user is not authenticated as an admin, a not found error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "If there is any internal server error, a generic error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/accounts/{username}/password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint changes the password for the provided username.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Changes the password for the current user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The username of the account for which the password is to be changed.",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body must contain the current password and the new password in JSON format.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/account.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upon successful password change, an OK response is returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "If the request body is invalid or the current password is incorrect, a bad request error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "If the user does not exist or is not authenticated, a not found error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "If there is any internal server error, a generic error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves and lists all the configured applications accessible to the authenticated user. This operation requires the user to be authenticated with administrative privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Applications"
                ],
                "summary": "List All Applications",
                "responses": {
                    "200": {
                        "description": "The operation was successful. The response contains the details of all the configured applications.",
                        "schema": {
                            "$ref": "#/definitions/app.ExtListResponse"
                        }
                    },
                    "404": {
                        "description": "Resource Not Found - The requested resources do not exist, or the authenticated user does not have sufficient permissions to access them.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new application with the provided details. This operation requires the user to be authenticated with administrative privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Applications"
                ],
                "summary": "Create an Application",
                "parameters": [
                    {
                        "description": "The details of the new application to be created.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.CreateAppRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "A successful response returns the details of the newly created application.",
                        "schema": {
                            "$ref": "#/definitions/app.ExtApp"
                        }
                    },
                    "400": {
                        "description": "Bad Request - The body of the request is not valid or incorrectly formatted.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Resource Not Found - The requested resource does not exist, or the authenticated user does not have sufficient permissions to access it.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing application identified by the provided app_id. This operation will also send a request to update public information and prevent further communications from the deleted application. Only users authenticated with administrative privileges can perform this operation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Applications"
                ],
                "summary": "Delete an Application",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The unique identifier (ID) of the application to be deleted.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation - the application has been deleted, and no content is returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Resource not found - The requested application does not exist, or the authenticated user does not have sufficient permissions to access it.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/apikeys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of API keys for a specific app_id, matching the specified filters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Retrieve a paginated list of API keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique Identifier (UUID) for the App",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The page number for pagination. If not provided, the default is 1.",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of API keys to return per page for pagination. If not provided, the default is 10.",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upon successful operation, a paginated list of API keys is returned.",
                        "schema": {
                            "$ref": "#/definitions/apikey.ExtListResponse"
                        }
                    },
                    "400": {
                        "description": "If the app_id, page, or per_page parameters are not valid, a bad request error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "If the user does not have sufficient permissions to access the API keys, a forbidden error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "If the app does not exist, a not found error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "If there is any internal server error, a generic error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This API endpoint creates a new API key for a specific app.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Create a new API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the app",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body containing details of the API key to be created. The source should be one of the following types: FULL, MESSAGING, or REQUESTS.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apikey.CreateApiKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upon successful operation, the details of the new API key are returned.",
                        "schema": {
                            "$ref": "#/definitions/apikey.ExtApiKey"
                        }
                    },
                    "400": {
                        "description": "If the app_id or request body parameters are not valid, a bad request error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "If the user does not have sufficient permissions to create an API key, a forbidden error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "If the app does not exist, a not found error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "If there is any internal server error, a generic error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/apikeys/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the specifics of an API key using the provided app_id and API key id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Retrieve specific API key details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique Identifier (UUID) that represents a specific App",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Unique Identifier (integer) that represents a specific API key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upon successful operation, the API key details are returned.",
                        "schema": {
                            "$ref": "#/definitions/apikey.ExtApiKey"
                        }
                    },
                    "400": {
                        "description": "If the app_id or id parameters are not valid, a bad request error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "If the user does not have sufficient permissions to access the API key details, a forbidden error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "If the API key does not exist, a not found error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "If there is any internal server error, a generic error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint updates the properties of an existing API key for a specific application.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Update an API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique Identifier (UUID) for the Application. This is used to ensure that the request is made within the context of a specific application.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Unique Identifier for the API key that is to be updated. This allows the server to identify the specific API key that needs updating.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body that must contain the updated details of the API key. This includes any changes to the API key's attributes that are allowed to be modified.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apikey.UpdateApiKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upon successful operation, the updated API key details are returned.",
                        "schema": {
                            "$ref": "#/definitions/apikey.ExtApiKey"
                        }
                    },
                    "400": {
                        "description": "If the app_id, id, or request body parameters are not valid, a bad request error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "If the user does not have sufficient permissions to update the API key, a forbidden error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "If the app or API key does not exist, a not found error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "If there is any internal server error, a generic error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint deletes an existing API key using the provided app_id and API key id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Delete an API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique Identifier (UUID) for the Application. This is used to ensure that the request is made within the context of a specific application.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Unique Identifier for the API key that is to be deleted. This allows the server to identify the specific API key that needs deleting.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upon successful operation, the details of the deleted API key are returned.",
                        "schema": {
                            "$ref": "#/definitions/apikey.ExtApiKey"
                        }
                    },
                    "400": {
                        "description": "If the app_id or id parameters are not valid, a bad request error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "If the user does not have sufficient permissions to delete the API key, a forbidden error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "If the app or API key does not exist, a not found error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "If there is any internal server error, a generic error is returned.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/connections": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of connections associated with the given app_id, matching the specified filters. Pagination is supported and can be controlled via optional page and per_page parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connections"
                ],
                "summary": "List All Connections",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the application whose connections are to be retrieved.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The page number for pagination. Defaults to 1 if not specified.",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of elements to be displayed per page for pagination. Defaults to 10 if not specified.",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. The response contains a list of connections associated with the specified application.",
                        "schema": {
                            "$ref": "#/definitions/connection.ExtListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new connection for the specified application (app_id). The details of the new connection are provided in the request body. Once the connection is created, a request for public information is sent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connections"
                ],
                "summary": "Create a New Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the application for which the new connection is to be created.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The body of the request, containing the details of the new connection to be created.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/connection.CreateConnectionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation. The response contains the details of the newly created connection.",
                        "schema": {
                            "$ref": "#/definitions/connection.ExtConnection"
                        }
                    },
                    "400": {
                        "description": "Bad Request - The body of the request is not valid or incorrectly formatted.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/connections/{connection_id}/facts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of facts for a specific connection, identified by the app_id and connection_id, with optional filters for pagination, source, and fact.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Facts"
                ],
                "summary": "Retrieve Facts with Filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the application associated with the connection.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the connection.",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for the results pagination.",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page.",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by the source of the fact.",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by the fact.",
                        "name": "fact",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of facts.",
                        "schema": {
                            "$ref": "#/definitions/fact.ExtListResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - The requested resource does not exist, or the authenticated user does not have the necessary permissions.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Issues a new fact to a specific connection, identified by the app_id and connection_id, using the details provided in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Facts"
                ],
                "summary": "Issue a New Fact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the application associated with the connection.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the connection to which the fact will be issued.",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The body of the request, containing the details of the fact to be issued.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/fact.CreateFactRequestDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Fact successfully issued.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - The body of the request is not valid or incorrectly formatted.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found - The requested resource does not exist, or the authenticated user does not have the necessary permissions.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/connections/{connection_id}/facts/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a specific fact, identified by the app_id, connection_id, and fact id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Facts"
                ],
                "summary": "Retrieve Fact Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the application associated with the connection.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the connection associated with the fact.",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the fact to be retrieved.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the fact details.",
                        "schema": {
                            "$ref": "#/definitions/fact.ExtFact"
                        }
                    },
                    "404": {
                        "description": "Not Found - The requested fact does not exist, or the authenticated user does not have the necessary permissions.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing fact for a specific connection, identified by the app_id, connection_id, and the fact's id. The fact is permanently removed from the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Facts"
                ],
                "summary": "Delete a Fact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the application associated with the connection.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the connection associated with the fact.",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the fact to be deleted.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - The fact was successfully deleted.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - The requested resource does not exist, or the authenticated user does not have the necessary permissions.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/connections/{connection_id}/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all messages for a specific connection within an app. Supports pagination and can filter messages since a specific message ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "List conversation messages.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Return elements since a message ID",
                        "name": "messages_since",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for results pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page for pagination",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Application ID",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Connection ID",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of messages",
                        "schema": {
                            "$ref": "#/definitions/message.ExtListResponse"
                        }
                    },
                    "404": {
                        "description": "Resource not found or unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a message to a specific connection within an app. Requires Bearer authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Sends a message.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Application ID",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Connection ID",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request to create a message",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/message.CreateMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully sent message",
                        "schema": {
                            "$ref": "#/definitions/message.Message"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Resource not found or unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/connections/{connection_id}/messages/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves details of a specific message identified by its JTI, within the context of a specific app and connection. Requires Bearer authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Gets a message.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Application ID",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Connection ID",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of message details",
                        "schema": {
                            "$ref": "#/definitions/message.Message"
                        }
                    },
                    "404": {
                        "description": "Resource not found or unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing message in a specific connection within an app. Requires Bearer authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Edits a message.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Application ID",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Connection ID",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request to update a message",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/message.UpdateMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated message",
                        "schema": {
                            "$ref": "#/definitions/message.Message"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Resource not found or unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific message from a specific connection within an app.",
                "tags": [
                    "messages"
                ],
                "summary": "Deletes a message.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Application ID",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Connection ID",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted message, no content returned"
                    },
                    "404": {
                        "description": "Resource not found or unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/connections/{connection_id}/messages/{id}/read": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows you to mark a specific message as read in a given application by its connection ID and message ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Marks a specific message as read",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Unique identifier of the connection",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Unique identifier of the message to be marked as read",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully marked the message as read. No content is returned."
                    },
                    "404": {
                        "description": "The requested resource could not be found, or you're not authorized to access it.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "An error occurred while processing your request. Please try again.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/connections/{connection_id}/messages/{id}/received": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the status of the specified message to 'received'.",
                "tags": [
                    "messages"
                ],
                "summary": "Marks a message as received",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Application ID",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Connection ID",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated message status to received"
                    },
                    "404": {
                        "description": "Message not found or unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error while processing your request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/connections/{connection_id}/notify": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a system notification to the given connection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Sends a system notification.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App id",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Connection id",
                        "name": "connection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "system notification",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/notification.SystemNotificationData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/apps/{app_id}/connections/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a specified connection, identified by the provided selfID and app_id. User must be authenticated and have sufficient permissions to access this information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connections"
                ],
                "summary": "Retrieve Connection Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the application associated with the connection.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The unique identifier (ID) of the connection to be retrieved.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. The response contains the details of the requested connection.",
                        "schema": {
                            "$ref": "#/definitions/connection.ExtConnection"
                        }
                    },
                    "404": {
                        "description": "Resource not found - The requested connection does not exist, or the authenticated user does not have sufficient permissions to access it.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the properties of an existing connection, identified by the provided app_id and connection id. The updates are passed in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connections"
                ],
                "summary": "Update a Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the application associated with the connection.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the connection to be updated.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The body of the request, containing the details of the connection updates.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/connection.UpdateConnectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. The response contains the details of the updated connection.",
                        "schema": {
                            "$ref": "#/definitions/connection.ExtConnection"
                        }
                    },
                    "400": {
                        "description": "Bad Request - The body of the request is not valid or incorrectly formatted.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred while processing the request.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing connection, identified by the provided app_id and connection id. Once the connection is deleted, a request for public information is sent, and incoming communications from the deleted connection are stopped.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connections"
                ],
                "summary": "Delete a Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the application associated with the connection.",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier (ID) of the connection to be deleted.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation. The response contains the details of the deleted connection.",
                        "schema": {
                            "$ref": "#/definitions/connection.ExtConnection"
                        }
                    },
                    "404": {
                        "description": "Resource Not Found - The requested connection does not exist, or the authenticated user does not have sufficient permissions to delete it.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/requests": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows you to send a fact or authentication request to a specified self user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Send a fact or authentication request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Application ID",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "schema": {
                            "$ref": "#/definitions/request.ExtRequest"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/apps/{app_id}/requests/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a request using the request ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Retrieve request details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Application ID",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "schema": {
                            "$ref": "#/definitions/request.ExtRequest"
                        }
                    },
                    "404": {
                        "description": "Request Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "This endpoint authenticates user credentials (username and password) and, upon successful authentication,",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate User and Retrieve Tokens",
                "parameters": [
                    {
                        "description": "Login credentials object containing 'username' and 'password' fields.",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful: Returns the JWT for API access and a refresh token.",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: The request is malformed or the JSON body cannot be parsed.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Authentication failed due to invalid credentials or inactive user account.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: An unexpected error occurred while processing the authentication request.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "This endpoint is used to refresh an expired or about to expire JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT Token",
                "parameters": [
                    {
                        "description": "Contains the refresh token that needs to be validated and exchanged for a new JWT token.",
                        "name": "refreshToken",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A new JWT token is successfully generated and returned along with its expiry information.",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: The request is invalid or malformed. The error message provides more details.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: The provided refresh token is invalid or expired, and a new JWT token cannot be issued.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: An unexpected error occurred while processing the refresh token request.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "check the service is up and running",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "healthcheck"
                ],
                "summary": "healthcheck endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "account.ChangePasswordRequest": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "account.CreateAccountRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "requires_password_change": {
                    "type": "boolean"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "account.CreateAccountResponse": {
            "type": "object",
            "properties": {
                "requires_password_change": {
                    "type": "boolean"
                },
                "resources": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "account.ExtAccount": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "requires_password_change": {
                    "type": "boolean"
                },
                "resources": {
                    "type": "string"
                }
            }
        },
        "account.ExtListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/account.ExtAccount"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_count": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "apikey.CreateApiKeyRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                }
            }
        },
        "apikey.ExtApiKey": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "apikey.ExtListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apikey.ExtApiKey"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_count": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "apikey.UpdateApiKeyRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "app.CreateAppRequest": {
            "type": "object",
            "properties": {
                "callback": {
                    "type": "string"
                },
                "env": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            }
        },
        "app.ExtApp": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "app.ExtListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/app.ExtApp"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_count": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "auth.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password password to authenticate with. Length has to be between 5 and\n128 characters.",
                    "type": "string"
                },
                "username": {
                    "description": "Username the username to authenticate with. Length has to be between 5 and\n128 characters.",
                    "type": "string"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "description": "RefreshToken the token to be used to refresh the access token.",
                    "type": "string"
                },
                "token": {
                    "description": "AccessToken the token to be used on authenticated requests.",
                    "type": "string"
                }
            }
        },
        "auth.RefreshRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "description": "RefreshToken the token to be used to refresh the access token.",
                    "type": "string"
                }
            }
        },
        "connection.CreateConnectionRequest": {
            "type": "object",
            "properties": {
                "selfid": {
                    "type": "string"
                }
            }
        },
        "connection.ExtConnection": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "connection.ExtListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/connection.ExtConnection"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_count": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "connection.UpdateConnectionRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "fact.CreateFactRequestDoc": {
            "type": "object",
            "properties": {
                "facts": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "group": {
                                "type": "object",
                                "properties": {
                                    "icon": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                }
                            },
                            "key": {
                                "type": "string"
                            },
                            "source": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "fact.ExtFact": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "iss": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "fact.ExtListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/fact.ExtFact"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_count": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "message.CreateMessageRequest": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/message.MessageOptions"
                }
            }
        },
        "message.ExtListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message.Message"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_count": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "message.Message": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "cid": {
                    "type": "string"
                },
                "connection_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "iat": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "read": {
                    "type": "boolean"
                },
                "received": {
                    "type": "boolean"
                },
                "rid": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "message.MessageObject": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "mime": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "message.MessageOptions": {
            "type": "object",
            "properties": {
                "objects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message.MessageObject"
                    }
                }
            }
        },
        "message.UpdateMessageRequest": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                }
            }
        },
        "notification.SystemNotificationData": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object",
                    "properties": {
                        "payload": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    }
                },
                "notification": {
                    "type": "object",
                    "properties": {
                        "message": {
                            "type": "string"
                        },
                        "title": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "request.CreateRequest": {
            "type": "object",
            "properties": {
                "allowed_for": {
                    "type": "integer"
                },
                "callback": {
                    "type": "string"
                },
                "connection_self_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "facts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/request.FactRequest"
                    }
                },
                "out_of_band": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "request.ExtRequest": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "deep_link": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "qr_code": {
                    "type": "string"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/request.ExtResource"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "request.ExtResource": {
            "type": "object",
            "properties": {
                "connection_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "request.FactRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "response.Error": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1/",
	Schemes:          []string{"http", "https"},
	Title:            "Joinself restful-client API",
	Description:      "This is the api for Joinself restful client.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
