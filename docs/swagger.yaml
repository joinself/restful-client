basePath: /v1/
definitions:
  account.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      password:
        type: string
    type: object
  account.CreateAccountRequest:
    properties:
      password:
        type: string
      requires_password_change:
        type: boolean
      resources:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  account.CreateAccountResponse:
    properties:
      requires_password_change:
        type: boolean
      resources:
        type: string
      user_name:
        type: string
    type: object
  account.ExtAccount:
    properties:
      id:
        type: string
      requires_password_change:
        type: boolean
      resources:
        type: string
    type: object
  account.ExtListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/account.ExtAccount'
        type: array
      page:
        type: integer
      page_count:
        type: integer
      per_page:
        type: integer
      total_count:
        type: integer
    type: object
  apikey.CreateApiKeyRequest:
    properties:
      name:
        type: string
      scope:
        type: string
    type: object
  apikey.ExtApiKey:
    properties:
      app_id:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      token:
        type: string
      updated_at:
        type: string
    type: object
  apikey.ExtListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/apikey.ExtApiKey'
        type: array
      page:
        type: integer
      page_count:
        type: integer
      per_page:
        type: integer
      total_count:
        type: integer
    type: object
  apikey.UpdateApiKeyRequest:
    properties:
      name:
        type: string
    type: object
  app.CreateAppRequest:
    properties:
      callback:
        type: string
      env:
        type: string
      id:
        type: string
      name:
        type: string
      secret:
        type: string
    type: object
  app.ExtApp:
    properties:
      env:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
    type: object
  app.ExtListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/app.ExtApp'
        type: array
      page:
        type: integer
      page_count:
        type: integer
      per_page:
        type: integer
      total_count:
        type: integer
    type: object
  auth.LoginRequest:
    properties:
      password:
        description: |-
          Password password to authenticate with. Length has to be between 5 and
          128 characters.
        type: string
      username:
        description: |-
          Username the username to authenticate with. Length has to be between 5 and
          128 characters.
        type: string
    type: object
  auth.LoginResponse:
    properties:
      refresh_token:
        description: RefreshToken the token to be used to refresh the access token.
        type: string
      token:
        description: AccessToken the token to be used on authenticated requests.
        type: string
    type: object
  auth.RefreshRequest:
    properties:
      refresh_token:
        description: RefreshToken the token to be used to refresh the access token.
        type: string
    type: object
  connection.CreateConnectionRequest:
    properties:
      selfid:
        type: string
    type: object
  connection.ExtConnection:
    properties:
      app_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  connection.ExtListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/connection.ExtConnection'
        type: array
      page:
        type: integer
      page_count:
        type: integer
      per_page:
        type: integer
      total_count:
        type: integer
    type: object
  connection.UpdateConnectionRequest:
    properties:
      name:
        type: string
    type: object
  fact.CreateFactRequestDoc:
    properties:
      facts:
        items:
          properties:
            group:
              properties:
                icon:
                  type: string
                name:
                  type: string
              type: object
            key:
              type: string
            source:
              type: string
            type:
              type: string
            value:
              type: string
          type: object
        type: array
    type: object
  fact.ExtFact:
    properties:
      created_at:
        type: string
      iss:
        type: string
      key:
        type: string
      source:
        type: string
      values:
        items:
          type: string
        type: array
    type: object
  fact.ExtListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/fact.ExtFact'
        type: array
      page:
        type: integer
      page_count:
        type: integer
      per_page:
        type: integer
      total_count:
        type: integer
    type: object
  message.CreateMessageRequest:
    properties:
      body:
        type: string
      options:
        $ref: '#/definitions/message.MessageOptions'
    type: object
  message.ExtListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/message.Message'
        type: array
      page:
        type: integer
      page_count:
        type: integer
      per_page:
        type: integer
      total_count:
        type: integer
    type: object
  message.Message:
    properties:
      body:
        type: string
      cid:
        type: string
      connection_id:
        type: string
      created_at:
        type: string
      iat:
        type: string
      id:
        type: string
      read:
        type: boolean
      received:
        type: boolean
      rid:
        type: string
      updated_at:
        type: string
    type: object
  message.MessageObject:
    properties:
      expires:
        type: integer
      key:
        type: string
      link:
        type: string
      mime:
        type: string
      name:
        type: string
    type: object
  message.MessageOptions:
    properties:
      objects:
        items:
          $ref: '#/definitions/message.MessageObject'
        type: array
    type: object
  message.UpdateMessageRequest:
    properties:
      body:
        type: string
    type: object
  notification.SystemNotificationData:
    properties:
      metadata:
        properties:
          payload:
            type: string
          type:
            type: string
        type: object
      notification:
        properties:
          message:
            type: string
          title:
            type: string
          type:
            type: string
        type: object
    type: object
  request.CreateRequest:
    properties:
      allowed_for:
        type: integer
      callback:
        type: string
      connection_self_id:
        type: string
      description:
        type: string
      facts:
        items:
          $ref: '#/definitions/request.FactRequest'
        type: array
      out_of_band:
        type: boolean
      type:
        type: string
    type: object
  request.ExtRequest:
    properties:
      app_id:
        type: string
      deep_link:
        type: string
      id:
        type: string
      qr_code:
        type: string
      resources:
        items:
          $ref: '#/definitions/request.ExtResource'
        type: array
      status:
        type: string
    type: object
  request.ExtResource:
    properties:
      connection_id:
        type: string
      id:
        type: string
    type: object
  request.FactRequest:
    properties:
      name:
        type: string
      sources:
        items:
          type: string
        type: array
    type: object
  response.Error:
    properties:
      details:
        type: string
      error:
        type: string
      path:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the api for Joinself restful client.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Joinself restful-client API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves and lists all the accounts that have been
        configured in the system.
      parameters:
      - description: The page number to retrieve. Defaults to 1 if not provided.
        in: query
        name: page
        type: integer
      - description: The number of accounts to retrieve per page. Defaults to 10 if
          not provided.
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Upon successful operation, a paginated list of accounts is
            returned.
          schema:
            $ref: '#/definitions/account.ExtListResponse'
        "404":
          description: Not found - The requested resource does not exist, or you don't
            have permissions to access it
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Lists all configured accounts.
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: This endpoint creates a new account in the system and sends a request
        to gather public information associated with the account.
      parameters:
      - description: The request body must contain the account details in JSON format.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/account.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Upon successful account creation, the response will contain
            the username, resources associated with the account,
          schema:
            $ref: '#/definitions/account.CreateAccountResponse'
        "400":
          description: If the request body is invalid, a bad request error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: If the user is not authenticated as an admin, a forbidden error
            is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: If there is any internal server error, a generic error is returned.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Creates a new account.
      tags:
      - accounts
  /accounts/{username}:
    delete:
      consumes:
      - application/json
      description: This endpoint deletes an existing account from the system.
      parameters:
      - description: The username of the account to be deleted.
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Upon successful account deletion, a no content response is
            returned.
          schema:
            type: string
        "404":
          description: If the account does not exist or the user is not authenticated
            as an admin, a not found error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: If there is any internal server error, a generic error is returned.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Deletes an existing account.
      tags:
      - accounts
  /accounts/{username}/password:
    put:
      consumes:
      - application/json
      description: This endpoint changes the password for the provided username.
      parameters:
      - description: The username of the account for which the password is to be changed.
        in: path
        name: username
        required: true
        type: string
      - description: The request body must contain the current password and the new
          password in JSON format.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/account.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Upon successful password change, an OK response is returned.
          schema:
            type: string
        "400":
          description: If the request body is invalid or the current password is incorrect,
            a bad request error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: If the user does not exist or is not authenticated, a not found
            error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: If there is any internal server error, a generic error is returned.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Changes the password for the current user.
      tags:
      - accounts
  /apps:
    get:
      consumes:
      - application/json
      description: Retrieves and lists all the configured applications accessible
        to the authenticated user. This operation requires the user to be authenticated
        with administrative privileges.
      produces:
      - application/json
      responses:
        "200":
          description: The operation was successful. The response contains the details
            of all the configured applications.
          schema:
            $ref: '#/definitions/app.ExtListResponse'
        "404":
          description: Resource Not Found - The requested resources do not exist,
            or the authenticated user does not have sufficient permissions to access
            them.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: List All Applications
      tags:
      - Applications
    post:
      consumes:
      - application/json
      description: Creates a new application with the provided details. This operation
        requires the user to be authenticated with administrative privileges.
      parameters:
      - description: The details of the new application to be created.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app.CreateAppRequest'
      produces:
      - application/json
      responses:
        "201":
          description: A successful response returns the details of the newly created
            application.
          schema:
            $ref: '#/definitions/app.ExtApp'
        "400":
          description: Bad Request - The body of the request is not valid or incorrectly
            formatted.
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Resource Not Found - The requested resource does not exist,
            or the authenticated user does not have sufficient permissions to access
            it.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error - An error occurred while processing
            the request.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Create an Application
      tags:
      - Applications
  /apps/{app_id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing application identified by the provided app_id.
        This operation will also send a request to update public information and prevent
        further communications from the deleted application. Only users authenticated
        with administrative privileges can perform this operation.
      parameters:
      - description: The unique identifier (ID) of the application to be deleted.
        in: path
        name: app_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Successful operation - the application has been deleted, and
            no content is returned.
          schema:
            type: string
        "404":
          description: Resource not found - The requested application does not exist,
            or the authenticated user does not have sufficient permissions to access
            it.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Delete an Application
      tags:
      - Applications
  /apps/{app_id}/apikeys:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of API keys for a specific app_id, matching
        the specified filters.
      parameters:
      - description: Unique Identifier (UUID) for the App
        in: path
        name: app_id
        required: true
        type: string
      - description: The page number for pagination. If not provided, the default
          is 1.
        in: query
        name: page
        type: integer
      - description: The number of API keys to return per page for pagination. If
          not provided, the default is 10.
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Upon successful operation, a paginated list of API keys is
            returned.
          schema:
            $ref: '#/definitions/apikey.ExtListResponse'
        "400":
          description: If the app_id, page, or per_page parameters are not valid,
            a bad request error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: If the user does not have sufficient permissions to access
            the API keys, a forbidden error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: If the app does not exist, a not found error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: If there is any internal server error, a generic error is returned.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Retrieve a paginated list of API keys
      tags:
      - apikeys
    post:
      consumes:
      - application/json
      description: This API endpoint creates a new API key for a specific app.
      parameters:
      - description: Unique identifier of the app
        in: path
        name: app_id
        required: true
        type: string
      - description: 'Body containing details of the API key to be created. The source
          should be one of the following types: FULL, MESSAGING, or REQUESTS.'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apikey.CreateApiKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Upon successful operation, the details of the new API key are
            returned.
          schema:
            $ref: '#/definitions/apikey.ExtApiKey'
        "400":
          description: If the app_id or request body parameters are not valid, a bad
            request error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: If the user does not have sufficient permissions to create
            an API key, a forbidden error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: If the app does not exist, a not found error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: If there is any internal server error, a generic error is returned.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Create a new API key
      tags:
      - apikeys
  /apps/{app_id}/apikeys/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint deletes an existing API key using the provided app_id
        and API key id.
      parameters:
      - description: Unique Identifier (UUID) for the Application. This is used to
          ensure that the request is made within the context of a specific application.
        in: path
        name: app_id
        required: true
        type: string
      - description: Unique Identifier for the API key that is to be deleted. This
          allows the server to identify the specific API key that needs deleting.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Upon successful operation, the details of the deleted API key
            are returned.
          schema:
            $ref: '#/definitions/apikey.ExtApiKey'
        "400":
          description: If the app_id or id parameters are not valid, a bad request
            error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: If the user does not have sufficient permissions to delete
            the API key, a forbidden error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: If the app or API key does not exist, a not found error is
            returned.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: If there is any internal server error, a generic error is returned.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Delete an API key
      tags:
      - apikeys
    get:
      consumes:
      - application/json
      description: Retrieves the specifics of an API key using the provided app_id
        and API key id.
      parameters:
      - description: Unique Identifier (UUID) that represents a specific App
        in: path
        name: app_id
        required: true
        type: string
      - description: Unique Identifier (integer) that represents a specific API key
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Upon successful operation, the API key details are returned.
          schema:
            $ref: '#/definitions/apikey.ExtApiKey'
        "400":
          description: If the app_id or id parameters are not valid, a bad request
            error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: If the user does not have sufficient permissions to access
            the API key details, a forbidden error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: If the API key does not exist, a not found error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: If there is any internal server error, a generic error is returned.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Retrieve specific API key details
      tags:
      - apikeys
    put:
      consumes:
      - application/json
      description: This endpoint updates the properties of an existing API key for
        a specific application.
      parameters:
      - description: Unique Identifier (UUID) for the Application. This is used to
          ensure that the request is made within the context of a specific application.
        in: path
        name: app_id
        required: true
        type: string
      - description: Unique Identifier for the API key that is to be updated. This
          allows the server to identify the specific API key that needs updating.
        in: path
        name: id
        required: true
        type: string
      - description: Request body that must contain the updated details of the API
          key. This includes any changes to the API key's attributes that are allowed
          to be modified.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apikey.UpdateApiKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Upon successful operation, the updated API key details are
            returned.
          schema:
            $ref: '#/definitions/apikey.ExtApiKey'
        "400":
          description: If the app_id, id, or request body parameters are not valid,
            a bad request error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: If the user does not have sufficient permissions to update
            the API key, a forbidden error is returned.
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: If the app or API key does not exist, a not found error is
            returned.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: If there is any internal server error, a generic error is returned.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Update an API key
      tags:
      - apikeys
  /apps/{app_id}/connections:
    get:
      consumes:
      - application/json
      description: Retrieves a list of connections associated with the given app_id,
        matching the specified filters. Pagination is supported and can be controlled
        via optional page and per_page parameters.
      parameters:
      - description: The unique identifier (ID) of the application whose connections
          are to be retrieved.
        in: path
        name: app_id
        required: true
        type: string
      - description: The page number for pagination. Defaults to 1 if not specified.
        in: query
        name: page
        type: integer
      - description: The number of elements to be displayed per page for pagination.
          Defaults to 10 if not specified.
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation. The response contains a list of connections
            associated with the specified application.
          schema:
            $ref: '#/definitions/connection.ExtListResponse'
        "500":
          description: Internal Server Error - An error occurred while processing
            the request.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: List All Connections
      tags:
      - Connections
    post:
      consumes:
      - application/json
      description: Creates a new connection for the specified application (app_id).
        The details of the new connection are provided in the request body. Once the
        connection is created, a request for public information is sent.
      parameters:
      - description: The unique identifier (ID) of the application for which the new
          connection is to be created.
        in: path
        name: app_id
        required: true
        type: string
      - description: The body of the request, containing the details of the new connection
          to be created.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/connection.CreateConnectionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful operation. The response contains the details of
            the newly created connection.
          schema:
            $ref: '#/definitions/connection.ExtConnection'
        "400":
          description: Bad Request - The body of the request is not valid or incorrectly
            formatted.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error - An error occurred while processing
            the request.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Create a New Connection
      tags:
      - Connections
  /apps/{app_id}/connections/{connection_id}/facts:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a list of facts using the provided app_id,
        connection_id, and other optional filters. The results can be paginated using
        page and per_page parameters.
      parameters:
      - description: Unique Identifier for the Application
        in: path
        name: app_id
        required: true
        type: string
      - description: Unique Identifier for the Connection
        in: path
        name: connection_id
        required: true
        type: string
      - description: Page number for the results pagination
        in: query
        name: page
        type: integer
      - description: Number of results per page
        in: query
        name: per_page
        type: integer
      - description: Filter by source of the fact
        in: query
        name: source
        type: string
      - description: Filter by fact
        in: query
        name: fact
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the list of facts
          schema:
            $ref: '#/definitions/fact.ExtListResponse'
        "404":
          description: The requested resource could not be found or you don't have
            permission to access it
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: There was a problem with your request. Please try again
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Retrieve facts based on filters
      tags:
      - facts
    post:
      consumes:
      - application/json
      description: This endpoint issues a new fact to a specific connection using
        the provided app_id, connection_id and the request body.
      parameters:
      - description: Unique Identifier for the Application
        in: path
        name: app_id
        required: true
        type: string
      - description: Unique Identifier for the Connection
        in: path
        name: connection_id
        required: true
        type: string
      - description: Body containing the details of the fact to be issued
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fact.CreateFactRequestDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Fact successfully issued
          schema:
            type: string
        "400":
          description: Invalid input - the provided body is not valid
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Not found - the requested resource does not exist, or you don't
            have permissions to access it
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal error - there was a problem with your request. Please
            try again
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Issue a new fact to a connection
      tags:
      - facts
  /apps/{app_id}/connections/{connection_id}/facts/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing fact for a specific connection identified by
        app_id, connection_id and the id of the fact to be deleted.
      parameters:
      - description: Unique Identifier for the Application
        in: path
        name: app_id
        required: true
        type: string
      - description: Unique Identifier for the Connection
        in: path
        name: connection_id
        required: true
        type: string
      - description: Unique Identifier for the Fact to be deleted
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Fact successfully deleted
          schema:
            type: string
        "404":
          description: The requested resource does not exist, or you don't have permissions
            to access it
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Deletes a fact
      tags:
      - facts
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the details of a specific fact using the
        provided app_id, connection_id and fact request id.
      parameters:
      - description: Unique Identifier for the Application
        in: path
        name: app_id
        required: true
        type: string
      - description: Unique Identifier for the Connection
        in: path
        name: connection_id
        required: true
        type: string
      - description: Unique Identifier for the Fact Request
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the fact details
          schema:
            $ref: '#/definitions/fact.ExtFact'
        "404":
          description: The requested fact could not be found or you don't have permission
            to access it
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Retrieve specific fact details
      tags:
      - facts
  /apps/{app_id}/connections/{connection_id}/messages:
    get:
      consumes:
      - application/json
      description: Retrieves all messages for a specific connection within an app.
        Supports pagination and can filter messages since a specific message ID.
      parameters:
      - description: Return elements since a message ID
        in: query
        name: messages_since
        type: integer
      - description: Page number for results pagination
        in: query
        name: page
        type: integer
      - description: Number of results per page for pagination
        in: query
        name: per_page
        type: integer
      - description: Application ID
        in: path
        name: app_id
        required: true
        type: string
      - description: Connection ID
        in: path
        name: connection_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of messages
          schema:
            $ref: '#/definitions/message.ExtListResponse'
        "404":
          description: Resource not found or unauthorized access
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: List conversation messages.
      tags:
      - messages
    post:
      consumes:
      - application/json
      description: Sends a message to a specific connection within an app. Requires
        Bearer authentication.
      parameters:
      - description: Application ID
        in: path
        name: app_id
        required: true
        type: string
      - description: Connection ID
        in: path
        name: connection_id
        required: true
        type: string
      - description: Request to create a message
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/message.CreateMessageRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Successfully sent message
          schema:
            $ref: '#/definitions/message.Message'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Resource not found or unauthorized access
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Sends a message.
      tags:
      - messages
  /apps/{app_id}/connections/{connection_id}/messages/{id}:
    delete:
      description: Deletes a specific message from a specific connection within an
        app.
      parameters:
      - description: Application ID
        in: path
        name: app_id
        required: true
        type: string
      - description: Connection ID
        in: path
        name: connection_id
        required: true
        type: string
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted message, no content returned
        "404":
          description: Resource not found or unauthorized access
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Deletes a message.
      tags:
      - messages
    get:
      consumes:
      - application/json
      description: Retrieves details of a specific message identified by its JTI,
        within the context of a specific app and connection. Requires Bearer authentication.
      parameters:
      - description: Application ID
        in: path
        name: app_id
        required: true
        type: string
      - description: Connection ID
        in: path
        name: connection_id
        required: true
        type: string
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of message details
          schema:
            $ref: '#/definitions/message.Message'
        "404":
          description: Resource not found or unauthorized access
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Gets a message.
      tags:
      - messages
    put:
      consumes:
      - application/json
      description: Updates an existing message in a specific connection within an
        app. Requires Bearer authentication.
      parameters:
      - description: Application ID
        in: path
        name: app_id
        required: true
        type: string
      - description: Connection ID
        in: path
        name: connection_id
        required: true
        type: string
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      - description: Request to update a message
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/message.UpdateMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated message
          schema:
            $ref: '#/definitions/message.Message'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Resource not found or unauthorized access
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Edits a message.
      tags:
      - messages
  /apps/{app_id}/connections/{connection_id}/messages/{id}/read:
    post:
      consumes:
      - application/json
      description: This endpoint allows you to mark a specific message as read in
        a given application by its connection ID and message ID.
      parameters:
      - description: Unique identifier of the application
        in: path
        name: app_id
        required: true
        type: string
      - description: Unique identifier of the connection
        in: path
        name: connection_id
        required: true
        type: string
      - description: Unique identifier of the message to be marked as read
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully marked the message as read. No content is returned.
        "404":
          description: The requested resource could not be found, or you're not authorized
            to access it.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: An error occurred while processing your request. Please try
            again.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Marks a specific message as read
      tags:
      - messages
  /apps/{app_id}/connections/{connection_id}/messages/{id}/received:
    post:
      description: Updates the status of the specified message to 'received'.
      parameters:
      - description: Application ID
        in: path
        name: app_id
        required: true
        type: string
      - description: Connection ID
        in: path
        name: connection_id
        required: true
        type: string
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully updated message status to received
        "404":
          description: Message not found or unauthorized access
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error while processing your request
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Marks a message as received
      tags:
      - messages
  /apps/{app_id}/connections/{connection_id}/notify:
    post:
      consumes:
      - application/json
      description: Sends a system notification to the given connection
      parameters:
      - description: App id
        in: path
        name: app_id
        required: true
        type: string
      - description: Connection id
        in: path
        name: connection_id
        required: true
        type: string
      - description: system notification
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/notification.SystemNotificationData'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - BearerAuth: []
      summary: Sends a system notification.
      tags:
      - notifications
  /apps/{app_id}/connections/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing connection, identified by the provided app_id
        and connection id. Once the connection is deleted, a request for public information
        is sent, and incoming communications from the deleted connection are stopped.
      parameters:
      - description: The unique identifier (ID) of the application associated with
          the connection.
        in: path
        name: app_id
        required: true
        type: string
      - description: The unique identifier (ID) of the connection to be deleted.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation. The response contains the details of
            the deleted connection.
          schema:
            $ref: '#/definitions/connection.ExtConnection'
        "404":
          description: Resource Not Found - The requested connection does not exist,
            or the authenticated user does not have sufficient permissions to delete
            it.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Delete a Connection
      tags:
      - Connections
    get:
      consumes:
      - application/json
      description: Retrieves the details of a specified connection, identified by
        the provided selfID and app_id. User must be authenticated and have sufficient
        permissions to access this information.
      parameters:
      - description: The unique identifier (ID) of the application associated with
          the connection.
        in: path
        name: app_id
        required: true
        type: string
      - description: The unique identifier (ID) of the connection to be retrieved.
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation. The response contains the details of
            the requested connection.
          schema:
            $ref: '#/definitions/connection.ExtConnection'
        "404":
          description: Resource not found - The requested connection does not exist,
            or the authenticated user does not have sufficient permissions to access
            it.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Retrieve Connection Details
      tags:
      - Connections
    put:
      consumes:
      - application/json
      description: Updates the properties of an existing connection, identified by
        the provided app_id and connection id. The updates are passed in the request
        body.
      parameters:
      - description: The unique identifier (ID) of the application associated with
          the connection.
        in: path
        name: app_id
        required: true
        type: string
      - description: The unique identifier (ID) of the connection to be updated.
        in: path
        name: id
        required: true
        type: string
      - description: The body of the request, containing the details of the connection
          updates.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/connection.UpdateConnectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation. The response contains the details of
            the updated connection.
          schema:
            $ref: '#/definitions/connection.ExtConnection'
        "400":
          description: Bad Request - The body of the request is not valid or incorrectly
            formatted.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error - An error occurred while processing
            the request.
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Update a Connection
      tags:
      - Connections
  /apps/{app_id}/requests:
    post:
      consumes:
      - application/json
      description: Sends a request request to the specified self user.
      parameters:
      - description: App id
        in: path
        name: app_id
        required: true
        type: string
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/request.ExtRequest'
      security:
      - BearerAuth: []
      summary: Sends a request request.
      tags:
      - requests
  /apps/{app_id}/requests/{id}:
    get:
      consumes:
      - application/json
      description: Get request details by request request id.
      parameters:
      - description: App id
        in: path
        name: app_id
        required: true
        type: string
      - description: Request request id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/request.ExtRequest'
      security:
      - BearerAuth: []
      summary: Get request details.
      tags:
      - requests
  /auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint authenticates user credentials (username and password)
        and, upon successful authentication,
      parameters:
      - description: Login credentials object containing 'username' and 'password'
          fields.
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Authentication successful: Returns the JWT for API access
            and a refresh token.'
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: 'Bad Request: The request is malformed or the JSON body cannot
            be parsed.'
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: 'Unauthorized: Authentication failed due to invalid credentials
            or inactive user account.'
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: 'Internal Server Error: An unexpected error occurred while
            processing the authentication request.'
          schema:
            $ref: '#/definitions/response.Error'
      summary: Authenticate User and Retrieve Tokens
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: This endpoint is used to refresh an expired or about to expire
        JWT token.
      parameters:
      - description: Contains the refresh token that needs to be validated and exchanged
          for a new JWT token.
        in: body
        name: refreshToken
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: A new JWT token is successfully generated and returned along
            with its expiry information.
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: 'Bad Request: The request is invalid or malformed. The error
            message provides more details.'
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: 'Unauthorized: The provided refresh token is invalid or expired,
            and a new JWT token cannot be issued.'
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: 'Internal Server Error: An unexpected error occurred while
            processing the refresh token request.'
          schema:
            $ref: '#/definitions/response.Error'
      summary: Refresh JWT Token
      tags:
      - Authentication
  /healthcheck:
    get:
      consumes:
      - application/json
      description: check the service is up and running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: healthcheck endpoint
      tags:
      - healthcheck
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
